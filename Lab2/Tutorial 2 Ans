1.
class MyGeneric<T> {
    private T t;

    public MyGeneric() {}

    public void add(T t) {
        this.t = t;
    }

    public T retrieve() {
        return this.t;
    }
}

class Container {
    public static void main(String[] args) {
        MyGeneric<Integer> intValue = new MyGeneric<>();
        MyGeneric<String> stringValue = new MyGeneric<>();

        intValue.add(50);
        stringValue.add("Java");

        System.out.println(intValue.retrieve());
        System.out.println(stringValue.retrieve());
        
    }
}


2.
class MyArray {
    public static void main(String[] args) {
        Integer[] intArr = {1, 2, 3, 4, 5};
        String[] strArr = {"Jane", "Tom", "Bob"};
        Character[] charArr = {'a', 'b', 'c'};

        listAll(intArr);
        listAll(strArr);
        listAll(charArr);
    }

    public static <T> void listAll(T[] arr) {
        for (T element : arr) {
            System.out.print(element + " ");
        }
        System.out.println();
    }
}


3.
Raw type is a generic class or interface use without a concrete type.
It is unsafe because it can check the type by having compile problem
and avoid ClassCastException.
Raw type is allowed in Java for backward compatibility with the older
version of Java.


4.
Erasure is remove the generic type after at compiling time  by replace
them with compatible type.
Java generics implements using erasure to have backward compatability with
yhe older version of Java.


5.
class Duo<A, B> {
    private A first;
    private B second;

    public Duo(A first, B second) {
        this.first = first;
        this.second = second;
    }
}


6.
class Q6 {
    public static void main(String[] args) {
        Duo<String, Integer> sideShape = new Duo<>("Hello", 123);
        Duo<Double, Double> points = new Duo<>(1.2, 12.3);
    }
}


7.
public static void method(ArrayList<?> list1, ArrayList<?> list2) {}


8.
public static void display(ArrayList<?> list) {
    for (Object element : list) {
        System.out.println(element);
    }
}


9.
Object


10.
All occurences of the type parameter will be replaced by the upper bound type.
<T extends Number> will be replaced by Number.
<E extends Comparable> will be replaced by Comparable.
